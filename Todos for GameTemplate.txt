- Make CMC read movement values from an attribute set.
- Make the example ability for the ExampleAbilitySystemCharacter more unusual than GA_Fire because it needs to emphasise that it's a specific ability to that one character.
- Change the "GetLevel() doesn't exist in this template. Will need to implement one if you want a level system" comment so that it works without it being a template
- Add a UE_LOG if NewAbility is null in GrantAbility:
	- UE_LOG(LogAbilitySystemSetup, Error, TEXT("Could'nt grant ability. NewAbility was null"));
- Add a DECLARE_MULTICAST_DELEGATE(FSetupWithAbilitySystemCompleted); in AbilitySystemCharacter.h.
	- Also do this kind of thing for the AbilitySystemPawn and AbilitySystemActor
- Fix gameplay ability UE_LOGs
	- the character run ability logs say jump instead of run
- Allow developer to specify multible DefaultAttributeValues GEs. Good for organization (ie. GE for movement attributes and one for damage attributes)
- Add message log by default for game template
- In GTCharacter, change the setup attachments to GetCapsuleComponent() instead of RootComponent
- Git rid of kismetsystemlibrary include in middle of abilitysystemcharacter code
- Maybe uncomment the PrimaryActorTick.bCanEverTick = false; to more strongly enforce
- Make UAT_RepeatAction
- Change the BAA_ classes to use a Gampelaytask instead. We had a discussion about this in the GAS discord and someone converted it without any weird problems.
- Move as much checks as you can from AcivateAbility into CanActivateAbility so that we can get activation rollback.
- In GTGameplayAbility, change implementation for ActivateAbility(). Shouldn't cancel ability if no valid prediction key. Also wrap it in an if check to make sure the NetExecutionPolicy is set to LocalPredicted for that logic to occur.
- For the Abilities we have, move the if (CommitAbility) check to be the last check
- Implement a way to be able to easily add passive abilities in the character BP. Also modify GrantAbility to be able to activate ability on grant. Also make GTGameplayAbility override OnAvatarSet() to activate the ability if a bool is true
- Move CMC movement variables to CharacterAttributeSet.h
- Add CollisionChannels.h or something like that
- GASShooter has a custom subclass of AGameplayAbilityTargetActor and a new WaitTargetDataWithReusableActor AbilityTask written from scratch that allows you to reuse a TargetActor without destroying it.
- In AbilitySystemActor::AbilitySystemActor() call SetReplicates(true);
- Make the server grant the abilities only after client character is spawned (and idealy possessed). Don't do a server RPC to tell server to grant abilities!!!
- Modify AbilitySystemCharacter and copy it to the pawn version.
- Add CollisionChannels.h (only public header -no cpp) to the Utilities folder
- Maybe add a GTAbilitySystemBlueprintLibrary
	- Need this is we want custom GameplayTargetDataFilters


- Consider adding confirm and cancel integers to the constructor of FGameplayAbilityInputBinds() in AAbilitySystemCharacter::BindASCInput()
	- FGameplayAbilityInputBinds(FString("ConfirmTarget"), FString("CancelTarget"), FString("EAbilityInputID"), static_cast<int32>(EAbilityInputID::Confirm), static_cast<int32>(EAbilityInputID::Cancel))
	- If I remember we chose not to do this because we didn't want confirm and cancel in the EAbilityInputID enum but just review this idea anyways

- Document that AbilitySystemCharacter is not meant to be used as a base class but rather a tool for base classes to use

- Add message log in saved after outputlog

- Take AS_PlayerState out of AttributeSets folder and delete the folder

- Add GTGameplayAbilityTargetActor base class and add our own AT_WaitTargetData that uses our base target actor instead
- Update all abilities to replicate CancelAbility() if a check in ActivateAbility() is NULL (unless if bRespectsRemoteAbilityToCancel=true)

- Make ActorAbilitySystemComponent protected rather than private in AbilitySystemActor

- Add bWithoutAbilitySystemComponentAsSubobject and the necessary checks to make it work
	- Look at SonicSiege's AbilitySystemActor.cpp

- Make SetupWithAbilitySystem(), InitializeAttribute(), and ApplyStartupEffects() protected (rather than private) in the AbilitySystemActor so that if a subclass is using bWithoutAbilitySystemComponentAsSubobject, he can call SetupWithAbilitySystem() on his own.

- Get rid of example ability ActorAbilitySpecHandle and ActorAbilityTSub and put it in an ExampleAbilitySystemActor
	- Or just put a comment above all references to these variables and mention that it's an example ability
- Get rid of example ability PawnAbilitySpecHandle and PawnAbilityTSub and put it in an ExampleAbilitySystemPawn
	- Or just put a comment above all references to these variables and mention that it's an example ability
	- Idk if pawn has this problem but even if it doesn't make an ExampleAbilitySystemPawn with an example ability

- Fix UE_CLOG in RegisterAttributeSets to be more specific by getting rid of the && condition eliminating the "either" in the log
	- break it into 2 if statements somehow?
	- figure out how to make it look clean still

- Fix thing where if CMC exceeds save move buffer the character becomes completely in the wrong place and its not accounted for


- AbilitySystemActor "ActorAttributeSet" IS NOT ON EVERY ACTOR". Name misleading
- Update GrantAbility() UELOG to give the function name



