void UAS_Ammo::PreAttributeChange(const FGameplayAttribute& Attribute, float& NewValue)
{
	Super::PreAttributeChange(Attribute, NewValue);

	if (Attribute == GetClipAmmoAttribute())
	{
		if (GetOwningActor()->GetLocalRole() < ROLE_Authority)
		{
			UAbilitySystemComponent* ASC = GetOwningAbilitySystemComponent();

			FGameplayEffectQuery EffectQuery;
			EffectQuery.ModifyingAttribute = Attribute;

			TArray<FActiveGameplayEffectHandle> ActiveHandles = ASC->GetActiveEffects(EffectQuery);
			if (ActiveHandles.Num() <= 0)
			{
				NewValue = GetClipAmmo(); // don't change this attribute, set the new value to the old value (do nothing)
			}


			if (emulatingNetworkUpdate == false)
			{
				emulatingNetworkUpdate = true;

				FGameplayAttributeData preModify = ClipAmmo;
				ClipAmmo.SetBaseValue(NewValue);

				ASC->SetBaseAttributeValueFromReplication(GetClipAmmoAttribute(), ClipAmmo, preModify);

				PostNetReceive(); // kinda sketch

				emulatingNetworkUpdate = false;
			}
		}
	}
}